{"version":3,"file":"static/js/681.80e1405d.chunk.js","mappings":"8SAIMA,EAAU,CACdC,QAAS,CACP,eAAgB,mBAChBC,cAAc,UAAD,OALD,yNAUHC,EAAa,mCAAG,6GAEFC,EAAAA,EAAAA,IACrB,+DACAJ,GAJuB,cAEnBK,EAFmB,yBAOjBA,EAASC,MAPQ,gCASzBC,QAAQC,MAAR,MATyB,yDAAH,qDAcbC,EAAY,mCAAG,WAAOC,GAAP,yFAElBC,EAAiBC,mBAAmBF,GAFlB,SAGDN,EAAAA,EAAAA,IAAA,0DAC8BO,EAD9B,8CAErBX,GALsB,cAGlBK,EAHkB,yBAQjBA,EAASC,MARQ,gCAUxBC,QAAQC,MAAR,MAVwB,yDAAH,sDAeZK,EAAiB,mCAAG,WAAOC,GAAP,gGAENV,EAAAA,EAAAA,IAAA,6CACiBU,EADjB,mBAErBd,GAJ2B,cAEvBK,EAFuB,yBAOrBA,EAASC,MAPY,gCAS7BC,QAAQC,MAAR,MAT6B,yDAAH,sDAcjBO,EAAiB,mCAAG,WAAOD,GAAP,gGAENV,EAAAA,EAAAA,IAAA,6CACiBU,EADjB,2BAErBd,GAJ2B,cAEvBK,EAFuB,yBAOrBA,EAASC,MAPY,gCAS7BC,QAAQC,MAAR,MAT6B,yDAAH,sDAcjBQ,EAAiB,mCAAG,WAAOF,GAAP,gGAENV,EAAAA,EAAAA,IAAA,6CACiBU,EADjB,kCAErBd,GAJ2B,cAEvBK,EAFuB,yBAOrBA,EAASC,MAPY,gCAS7BC,QAAQC,MAAR,MAT6B,yDAAH,qD,wGCrC9B,UA5BA,WACI,OAA8BS,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQL,GAAYM,EAAAA,EAAAA,MAAZN,QAaR,OAXAO,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAe,mCAAG,8GAEON,EAAAA,EAAAA,IAAkBF,GAFzB,OAEdS,EAFc,OAGpBJ,EAAWI,EAAaC,SAHJ,gDAKpBjB,QAAQC,MAAR,MALoB,yDAAH,qDAOrBc,GACH,GAAE,CAACR,KAGA,0BACI,wBACKI,GAAWA,EAAQO,KAAI,SAAAC,GAAM,OAC1B,sCACcA,EAAOC,SADZD,EAAOE,GADU,OAQ7C,C","sources":["API/getSearchMovies.js","components/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = 'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJjODBjYWExOTNmYThjNjdkM2IzNjAxNTU5ZjI3ZjVjOCIsInN1YiI6IjY0MzZmYjNkOTQ2MzE4MDA5YTJlNWJlMiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.kPu6W8tbG8flf6ruZ_S92c8XdiohS5SHkBe3jEgG81I';\n\nconst options = {\n  headers: {\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${API_KEY}`,\n  },\n};\n\n// Запит на отримання загальних трендів\nexport const fetchTrending = async () => {\n  try {\n    const response = await axios.get(\n      'https://api.themoviedb.org/3/trending/all/day?language=en-US',\n      options\n    );\n    // console.log(response.data) // в консоль результат\n    return (response.data);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// Запит на пошук фільмів за запитом\nexport const searchMovies = async (query) => {\n  try {\n    const formattedQuery = encodeURIComponent(query);\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/search/movie?query=${formattedQuery}&include_adult=false&language=en-US&page=1`,\n      options\n    );\n    // console.log(response.data); // в консоль результат\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// Запит на отримання деталей конкретного фільму\nexport const fetchMovieDetails = async (movieId) => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}?language=en-US`,\n      options\n    );\n    // console.log(response.data) // в консоль результат\n    return (response.data);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// Запит на отримання акторського складу фільму\nexport const fetchMovieCredits = async (movieId) => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/credits?language=en-US`,\n      options\n    );\n    // console.log(response.data.cast) // в консоль результат\n    return (response.data);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// Запит на отримання відгуків про фільм\nexport const fetchMovieReviews = async (movieId) => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/reviews?language=en-US&page=1`,\n      options\n    );\n    // console.log(response.data.results) // в консоль результат\n    return (response.data);\n  } catch (error) {\n    console.error(error);\n  }\n};","import { fetchMovieReviews } from 'API/getSearchMovies';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nfunction Revievs() {\n    const [revievs, setRevievs] = useState(null);\n    const { movieId } = useParams()\n\n    useEffect(() => {\n        const getMovieRevievs = async () => {\n        try {\n            const movieRevievs = await fetchMovieReviews(movieId);\n            setRevievs(movieRevievs.results);\n        } catch (error) {\n            console.error(error);\n        }};\n        getMovieRevievs();\n    }, [movieId]);\n\n    return (\n        <div>\n            <ul>\n                {revievs && revievs.map(reviev => (\n                    <li key={reviev.id}>\n                        author : {reviev.author}\n                    </li>\n                ))}\n            </ul>\n        </div>\n    )\n}\n\nexport default Revievs"],"names":["options","headers","Authorization","fetchTrending","axios","response","data","console","error","searchMovies","query","formattedQuery","encodeURIComponent","fetchMovieDetails","movieId","fetchMovieCredits","fetchMovieReviews","useState","revievs","setRevievs","useParams","useEffect","getMovieRevievs","movieRevievs","results","map","reviev","author","id"],"sourceRoot":""}