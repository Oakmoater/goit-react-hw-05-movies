{"version":3,"file":"static/js/565.ee5f126c.chunk.js","mappings":"8SAIMA,EAAU,CACdC,QAAS,CACP,eAAgB,mBAChBC,cAAc,UAAD,OALD,yNAUHC,EAAa,mCAAG,6GAEFC,EAAAA,EAAAA,IACrB,+DACAJ,GAJuB,cAEnBK,EAFmB,yBAOjBA,EAASC,MAPQ,gCASzBC,QAAQC,MAAR,MATyB,yDAAH,qDAcbC,EAAY,mCAAG,WAAOC,GAAP,yFAElBC,EAAiBC,mBAAmBF,GAFlB,SAGDN,EAAAA,EAAAA,IAAA,0DAC8BO,EAD9B,8CAErBX,GALsB,cAGlBK,EAHkB,yBAQjBA,EAASC,MARQ,gCAUxBC,QAAQC,MAAR,MAVwB,yDAAH,sDAeZK,EAAiB,mCAAG,WAAOC,GAAP,gGAENV,EAAAA,EAAAA,IAAA,6CACiBU,EADjB,mBAErBd,GAJ2B,cAEvBK,EAFuB,OAM7BE,QAAQQ,IAAIV,EAASC,MANQ,kBAOrBD,EAASC,MAPY,gCAS7BC,QAAQC,MAAR,MAT6B,yDAAH,sDAcjBQ,EAAiB,mCAAG,WAAOF,GAAP,gGAENV,EAAAA,EAAAA,IAAA,6CACiBU,EADjB,2BAErBd,GAJ2B,cAEvBK,EAFuB,yBAOrBA,EAASC,MAPY,gCAS7BC,QAAQC,MAAR,MAT6B,yDAAH,sDAcjBS,EAAiB,mCAAG,WAAOH,GAAP,gGAENV,EAAAA,EAAAA,IAAA,6CACiBU,EADjB,kCAErBd,GAJ2B,cAEvBK,EAFuB,yBAOrBA,EAASC,MAPY,gCAS7BC,QAAQC,MAAR,MAT6B,yDAAH,qD,2DC7C9B,IArBA,YAAgC,IAAXU,EAAU,EAAVA,OACbC,GAAWC,EAAAA,EAAAA,MAIjB,OACE,wBACGF,EAAOG,KAAI,SAAAC,GAAK,OACf,yBACE,UAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMP,GAAhD,WACE,gBAAKQ,IAAG,UARF,6BAQE,YAPC,QAOD,OACsBL,EAAMM,aAClCC,IAAI,KACLP,EAAMQ,MAAQR,EAAMQ,MAAQR,EAAMS,SAL9BT,EAAME,GADA,KAYtB,C,gHCwBD,UAzCA,WAAmB,IAAD,EACd,GAA4BQ,EAAAA,EAAAA,UAAS,IAArC,eAAOd,EAAP,KAAee,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAU,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,GA2BhD,OAzBAC,EAAAA,EAAAA,YAAU,WAAM,wCAMhB,8GAEgC9B,EAAAA,EAAAA,IAAa4B,GAF7C,OAEUG,EAFV,OAGIP,EAAUO,EAAcC,SAH5B,gDAKIlC,QAAQC,MAAR,MALJ,0DANgB,sBACG,KAAf6B,EADY,mCAehBK,GAbIT,EAAU,GAcb,GAAE,CAACE,EAAcE,KAUd,6BACI,kBAAMM,SATO,SAACC,GAClBA,EAAEC,iBACF,IACMC,EADOF,EAAEG,cACYC,SAAStC,MAAMuC,MAC1Cb,EAAgB,CAAE1B,MAAOoC,GAC5B,EAIO,WACI,kBAAOI,KAAK,OAAOnB,KAAK,QAAQoB,aAAcd,KAC9C,mBAAQa,KAAK,SAAb,wBAEJ,SAAC,IAAD,CAAWhC,OAAQA,MAG9B,C","sources":["API/getSearchMovies.js","components/MovieList.jsx","pages/Search.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = 'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJjODBjYWExOTNmYThjNjdkM2IzNjAxNTU5ZjI3ZjVjOCIsInN1YiI6IjY0MzZmYjNkOTQ2MzE4MDA5YTJlNWJlMiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.kPu6W8tbG8flf6ruZ_S92c8XdiohS5SHkBe3jEgG81I';\n\nconst options = {\n  headers: {\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${API_KEY}`,\n  },\n};\n\n// Запит на отримання загальних трендів\nexport const fetchTrending = async () => {\n  try {\n    const response = await axios.get(\n      'https://api.themoviedb.org/3/trending/all/day?language=en-US',\n      options\n    );\n    // console.log(response.data) // в консоль результат\n    return (response.data);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// Запит на пошук фільмів за запитом\nexport const searchMovies = async (query) => {\n  try {\n    const formattedQuery = encodeURIComponent(query);\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/search/movie?query=${formattedQuery}&include_adult=false&language=en-US&page=1`,\n      options\n    );\n    // console.log(response.data); // в консоль результат\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// Запит на отримання деталей конкретного фільму\nexport const fetchMovieDetails = async (movieId) => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}?language=en-US`,\n      options\n    );\n    console.log(response.data) // в консоль результат\n    return (response.data);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// Запит на отримання акторського складу фільму\nexport const fetchMovieCredits = async (movieId) => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/credits?language=en-US`,\n      options\n    );\n    // console.log(response.data.cast) // в консоль результат\n    return (response.data);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// Запит на отримання відгуків про фільм\nexport const fetchMovieReviews = async (movieId) => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/reviews?language=en-US&page=1`,\n      options\n    );\n    // console.log(response.data.results) // в консоль результат\n    return (response.data);\n  } catch (error) {\n    console.error(error);\n  }\n};","import React from 'react';\nimport { useLocation, Link } from 'react-router-dom';\n\nfunction MovieList({ movies }) {\n  const location = useLocation()\n  const baseUrl = \"https://image.tmdb.org/t/p\"\n  const posterSize = \"w200\"\n\n  return (\n    <ul>\n      {movies.map(movie => (\n        <li key={movie.id}>\n          <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n            <img src=\n              {`${baseUrl}/${posterSize}${movie.poster_path}`}\n              alt=\"\" />\n            {movie.title ? movie.title : movie.name}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport default MovieList;\n","import { useState, useEffect } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { searchMovies } from \"API/getSearchMovies\";\nimport MovieList from \"components/MovieList\";\n\nfunction Search() {\n    const [movies, setMovies] = useState([]);\n    const [searchParams, setSearchParams] = useSearchParams();\n    const queryValue = searchParams.get(\"query\") ?? \"\";\n\n    useEffect(() => {\n    if (queryValue === \"\") {\n        setMovies([])\n        return\n    };\n\n    async function fetchMovies() {\n        try {\n        const searchResults = await searchMovies(queryValue);\n        setMovies(searchResults.results);\n        } catch (error) {\n        console.error(error);\n        }\n    }\n\n    fetchMovies();\n    }, [searchParams, queryValue]);\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const form = e.currentTarget;\n        const newQueryValue = form.elements.query.value;\n        setSearchParams({ query: newQueryValue });\n    };\n\n    return (\n        <main>\n            <form onSubmit={handleSubmit}>\n                <input type=\"text\" name=\"query\" defaultValue={queryValue} />\n                <button type=\"submit\">Search</button>\n            </form>\n            <MovieList movies={movies} />\n        </main>\n    );\n}\n\nexport default Search;\n"],"names":["options","headers","Authorization","fetchTrending","axios","response","data","console","error","searchMovies","query","formattedQuery","encodeURIComponent","fetchMovieDetails","movieId","log","fetchMovieCredits","fetchMovieReviews","movies","location","useLocation","map","movie","to","id","state","from","src","poster_path","alt","title","name","useState","setMovies","useSearchParams","searchParams","setSearchParams","queryValue","get","useEffect","searchResults","results","fetchMovies","onSubmit","e","preventDefault","newQueryValue","currentTarget","elements","value","type","defaultValue"],"sourceRoot":""}